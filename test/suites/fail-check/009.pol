data CoNat {
    Z,
    S(n: CoNat),
    Omega,
}
codata Fun(a b: Type) {
    -- | Application of a function to its argument.
    Fun(a,b).ap(a b: Type, x: a): b
}

data NotZero(n: CoNat) {
    SNotZero(n: CoNat): NotZero(S(n)),
    OmegaNotZero: NotZero(Omega),
}

def CoNat.pred : CoNat {
    Z => Z,
    S(n) => n,
    Omega => Omega,
}

codata CoList(n: CoNat) {
    CoList(n).head(n: CoNat, p: NotZero(n)) : CoNat,
    CoList(n).tail(n: CoNat): CoList(n.pred),
}

codef CountUp(from: CoNat) : CoList(Omega) {
    .head(n, p) => from,
    .tail(n) => CountUp(S(from)),
}

codef TakeN(n: CoNat, s: CoList(Omega)) : CoList(n) {
    .head(n', p) => s.head(Omega, OmegaNotZero),
    .tail(n') => TakeN(n.pred, s.tail(Omega)),
}


codef ZipWith(n : Type, f : (CoNat -> CoNat -> CoNat), l1:CoList(n), l2: CoList(n)) : CoList(n) {
}
